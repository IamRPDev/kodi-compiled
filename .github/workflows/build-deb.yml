name: Build Kodi .deb (Mint 22.2 / Ubuntu 22.04)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-deb:
    name: Build Kodi and create .deb
    runs-on: ubuntu-22.04
    env:
      REPO: xbmc/xbmc
      KODI_INSTALL_PREFIX: /opt/kodi
    steps:
      - name: Checkout this repo (packaging and workflow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Clone xbmc/xbmc (shallow)
        run: |
          git clone --depth 1 https://github.com/xbmc/xbmc.git xbmc

      - name: Install build & packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake ninja-build pkg-config git python3 python3-pip \
            autoconf automake libtool gettext curl \
            libx11-dev libxrandr-dev libxinerama-dev libxss-dev libxext-dev \
            libasound2-dev libpulse-dev libudev-dev libdbus-1-dev \
            libssl-dev libcurl4-openssl-dev libsmbclient-dev libnfs-dev \
            libavcodec-dev libavformat-dev libavutil-dev libswscale-dev \
            libgl1-mesa-dev libgles2-mesa-dev libwayland-dev libxkbcommon-dev \
            libfmt-dev libboost-all-dev libglib2.0-dev libc6-dev \
            dpkg-dev fakeroot zip libpipewire-0.3-dev libspa-0.2-dev

# url=https://github.com/IamRPDev/kodi-compiled/blob/main/.github/workflows/build-deb.yml
# Add the following step after the apt install step and before the "Build and package" step
- name: Build and install PipeWire >= 0.3.50 from source
  run: |
    set -euo pipefail
    # Install meson/ninja and extra build deps
    sudo apt-get install -y --no-install-recommends \
      meson ninja-build libsystemd-dev libdbus-1-dev libudev-dev libasound2-dev \
      libjack-jackd2-dev libsndfile1-dev libsndio-dev libudev-dev \
      libavahi-client-dev libbluetooth-dev libcap-dev libxcb-composite0-dev \
      pkg-config python3-pip
    # Ensure modern meson/ninja if necessary
    python3 -m pip install --user meson==1.2.0 ninja
    export PATH="$HOME/.local/bin:$PATH"

    # Build and install PipeWire
    PW_VERSION="0.3.63"   # choose a recent release >= 0.3.50
    PW_DIR="${RUNNER_TEMP:-/tmp}/pipewire-src"
    rm -rf "$PW_DIR"
    git clone --depth 1 --branch "v${PW_VERSION}" https://gitlab.freedesktop.org/pipewire/pipewire.git "$PW_DIR"
    cd "$PW_DIR"

    # Prepare a build dir and run meson/ninja
    meson setup build -Ddefault_library=shared -Ddocumentation=false -Dsystemd=true -Dman=false
    meson compile -C build -v
    sudo meson install -C build

    # Make sure pkg-config can find the new files and linker can find libs
    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:${PKG_CONFIG_PATH:-}
    export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH:-}
    # Verify version visible via pkg-config
    pkg-config --modversion pipewire || true

      - name: Build and package
        run: |
          set -euo pipefail
          mkdir -p build
          cd build
          cmake -S ../xbmc -B . -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${KODI_INSTALL_PREFIX} \
            -DENABLE_TESTS=OFF \
            -DENABLE_ADDONS=ON \
            -DENABLE_PULSEAUDIO=ON \
            -DENABLE_PIPEWIRE=ON \
            -DENABLE_VAAPI=ON \
            -DENABLE_V4L=ON
          ninja -v -j $(nproc)
          STAGING_DIR="${{ github.workspace }}/pkg-staging"
          rm -rf "${STAGING_DIR}"
          mkdir -p "${STAGING_DIR}"
          ninja install DESTDIR="${STAGING_DIR}"
          PKG_DIR="${{ github.workspace }}/kodi-deb"
          rm -rf "${PKG_DIR}"
          mkdir -p "${PKG_DIR}${KODI_INSTALL_PREFIX}"
          cp -a "${STAGING_DIR}${KODI_INSTALL_PREFIX}/." "${PKG_DIR}${KODI_INSTALL_PREFIX}/"
          mkdir -p "${PKG_DIR}/DEBIAN"
          sed \
            -e "s|%VERSION%|$(date +%Y%m%d)-${GITHUB_SHA::7}|g" \
            -e "s|%ARCH%|amd64|g" \
            packaging/control.template > "${PKG_DIR}/DEBIAN/control"
          if [ -f packaging/postinst ]; then
            install -m 0755 packaging/postinst "${PKG_DIR}/DEBIAN/postinst"
          fi
          if [ -f packaging/prerm ]; then
            install -m 0755 packaging/prerm "${PKG_DIR}/DEBIAN/prerm"
          fi
          chmod -R 0755 "${PKG_DIR}/DEBIAN"
          PKG_NAME="kodi-$(date +%Y%m%d)-${GITHUB_SHA::7}_amd64.deb"
          dpkg-deb --build "${PKG_DIR}" "${{ github.workspace }}/out/${PKG_NAME}"
          ls -lh out || true

      - name: Upload artifact (.deb)
        uses: actions/upload-artifact@v4
        with:
          name: kodi-deb
          path: out/*.deb

      - name: Create GitHub Release and upload .deb
        uses: ncipollo/release-action@v1
        with:
          artifacts: out/*.deb
          tag: build-${{ github.run_id }}
          name: kodi-deb-${{ github.run_id }}
          body: "Automated Kodi .deb build for Linux Mint 22.2 (Ubuntu 22.04 runner)."
